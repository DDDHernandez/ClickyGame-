{"version":3,"sources":["components/counter/counter.js","components/gamestate/gamestate.js","components/navbar/navbar.js","components/wrapper/wrapper.js","components/image/image.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","react_default","a","createElement","className","count","highscore","GameState","id","gamestate","Navbar","gamestate_gamestate","counter_counter","Wrapper","Object","assign","Image","alt","name","src","image","onClick","clickImage","data-id","Footer","App","state","images","shuffleArray","array","i","length","j","Math","floor","random","temp","imageLooper","imageCards","clickTarget","_this","clicked","gameState","setState","forEach","event","parseInt","target","getAttributeNode","value","console","log","_this2","this","navbar_navbar","wrapper_wrapper","map","components_image_image","key","footer_footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e98209e5.chunk.js","sourcesContent":["import React from 'react'\nimport './counter.css'\n\nconst Counter = props => (\n  <span className=\"counter\"><h4>Score: {props.count}<br/> Top Score: {props.highscore}</h4></span>\n)\n\nexport default Counter;","import React from 'react'\nimport './gamestate.css'\n\nconst GameState = props => (\n  <span className=\"gamestate\" id=\"gamestate\"><h4>{props.gamestate}</h4></span>\n)\n\nexport default GameState;","import React from 'react'\nimport './navbar.css'\nimport Counter from '../counter/counter'\nimport GameState from '../gamestate/gamestate'\n\nconst Navbar = props => (\n  \n  <nav className=\"navbar navbar-expand-lg\">\n    <div className=\"row\">\n      <div className=\"col-sm-12 col-md-4\">\n        <span id=\"title\"><h4>The Click Tracker</h4></span>\n      </div>\n      <div className=\"col-sm-12 col-md-4\">\n       <span className=\"gamestate\"> <GameState gamestate={props.gamestate} /></span>\n      </div>\n      <div className=\"col-sm-12 col-md-4\">\n       <span className=\"counter\"> <Counter count={props.count} highscore={props.highscore} /> </span>\n      </div>\n    </div>\n    \n  </nav>\n  \n)\n\nexport default Navbar;","import React from 'react'\nimport './wrapper.css'\n\n\nconst Wrapper = props => ( \n<div className=\"row\">\n<div className=\"body-content fluid\">\n<div className=\"jumbotron jumbotron-fluid\" >\n<div className=\"container\">\n<header ><span><h1 className=\"header\">The Click Tracker 2000</h1></span>\n<span id=\"instructions\"><p className=\"lead\">The Click Tracker is a game that keeps track of which Will Ferrell movies you have clicked on.\n    Try to click a new image until you have clicked all 12 of the images without repeating a picture. Hope you know your Will Ferrel Movies!</p></span>\n</header>\n</div>\n</div>\n\n<div className=\"container\" id=\"imageContainer\" >\n<main className='wrapper' {...props} />\n</div>\n</div>\n</div>\n);\nexport default Wrapper","import React from 'react'\nimport './image.css'\n\nconst Image = props => (\n    \n    <img alt={props.name} src={props.image} onClick={props.clickImage} data-id={props.id} className=\"choose\" />\n)\n\nexport default Image","import React from 'react'\r\nimport './footer.css'\r\n\r\nconst Footer = props => (\r\n    <div className=\"footer\">\r\n      <div className=\"row\">\r\n          <span className=\"col-sm-12\" id=\"footerTitle\"><h2>The Click Tracker</h2></span>\r\n        </div>\r\n      </div>\r\n    \r\n  )\r\n  \r\n  export default Footer;","import React, { Component } from 'react';\nimport Navbar from \"./components/navbar/navbar\";\nimport Wrapper from \"./components/wrapper/wrapper\";\nimport Image from \"./components/image/image\";\nimport images from \"./images.json\";\nimport Footer from \"./components/footer/footer\"\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    images,\n    count: 0,\n    highscore: 0,\n    gamestate: `Click a new movie each time!`\n  }\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      let temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n    }\n    return array;\n  }\n\n  imageLooper = (imageCards, clickTarget) => {\n    let count = this.state.count;\n    for (let i=0; i < imageCards.length; i++) {\n      if (imageCards[i].id === clickTarget && !imageCards[i].clicked) {\n        let gameState = `Correct!`\n        imageCards[i].clicked = true\n        count++;\n        this.setState({ count: count, gamestate: gameState, images: this.shuffleArray(imageCards) });\n      \n        if (count === 12) {          \n           gameState = `You Win!`\n           imageCards.forEach((image) => {\n            image.clicked = false\n          })\n          this.setState({\n            highscore: 12,\n            count: 0,\n            images: this.shuffleArray(imageCards),\n            gamestate: gameState\n          })\n        }\n        break;\n\n      }  else if (imageCards[i].id === clickTarget && imageCards[i].clicked) {\n        imageCards.forEach((image) => {\n        image.clicked = false\n        })\n        this.setState({\n            highscore: this.state.count > this.state.highscore ? this.state.count : this.state.highscore,\n            count: 0,\n            gamestate: `You lose!`,\n            images: this.shuffleArray(imageCards)\n        })\n        break;\n      }  \n    }\n  }\n\n  clickImage = (event) => {\n    let clickTarget = parseInt(event.target.getAttributeNode('data-id').value, 10)\n    this.imageLooper(this.state.images, clickTarget)\n    console.log(this.state)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar gamestate={this.state.gamestate} count={this.state.count} highscore={this.state.highscore} />\n        <Wrapper>\n          {this.state.images.map(image => (\n            <Image\n              clickImage={this.clickImage}\n              id={image.id}\n              key={image.id}\n              name={image.name}\n              image={image.image}\n              clicked={image.clicked}\n            />\n          ))}\n        </Wrapper>\n        <Footer></Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}